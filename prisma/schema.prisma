// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

// ==========================================
// Session Model
// Used in: Shopify authentication system
// File: app/shopify.server.js
// Purpose: Manages Shopify session data for user authentication and authorization
// ==========================================
model Session {
  id            String    @id
  shop          String // Store identifier
  state         String // Session state for security
  isOnline      Boolean   @default(false) // Whether session is active
  scope         String? // Permission scopes
  expires       DateTime? // Session expiry time
  accessToken   String // OAuth access token
  userId        BigInt? // Shopify user ID
  firstName     String? // User's first name
  lastName      String? // User's last name
  email         String? // User's email
  accountOwner  Boolean   @default(false) // Whether user owns the account
  locale        String? // User's locale preference
  collaborator  Boolean?  @default(false) // Whether user is a collaborator
  emailVerified Boolean?  @default(false) // Email verification status
}
// ==========================================
// Product Model
// Used in: Settings page and Order management
// Files: 
// - app/routes/app.settings.jsx (Product configuration)
// - app/routes/app.orders.jsx (Product reference in orders)
// Purpose: Stores product information and pricing details
// ==========================================
model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==========================================
// Customer Model
// Used in: Orders page and customer management
// Files: 
// - app/routes/app.orders.jsx
// - app/services/orders.server.js
// Purpose: Stores customer information and their order history
// ==========================================
model Customer {
  id        String   @id// Shopify customer ID
  firstName String?
  lastName  String?
  email     String   @unique
  phone     String?
  state     String? // Customer state/status
  tags      String? // Customer tags
  orders    Order[] // Relation to orders
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==========================================
// Order Model
// Used in: Orders page
// File: app/routes/app.orders.jsx
// Purpose: Tracks customer orders and their various statuses
// ==========================================
model Order {
  id               Int            @id @default(autoincrement())
  orderDate        DateTime // When order was placed
  name             String // Customer name
  email            String // Customer email
  phone            String // Customer phone
  orderId          String         @unique // External order reference
  productId        String? // Reference to product
  productName      String? // Product name
  payment          PaymentStatus // Payment status (PAID/PENDING)
  paymentMethod    PaymentMethod // Payment method used
  tier             String // Customer tier (Premium/Standard)
  address          String // Delivery address
  customer         Customer?      @relation(fields: [customerId], references: [id]) // Relation to customer
  customerId      String?
  riskVerification RiskStatus
  tags            String?
  paymentValue     Float?     
  otp             OtpStatus
  ivr             IvrStatus
  shipmentStatus  ShipmentStatus
  qualityScore    Float?      
  tierCity        String?
  deliveryTime    String?
  cancelledAt     String?  
  closed          Boolean?  
  flagged         Boolean?    
  shippable       Boolean ?   
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

}

// Matches Shopify's cancel_reason field
enum OrderCancelReason {
  CUSTOMER // Canceled by customer
  FRAUD // Fraudulent order
  INVENTORY // Inventory unavailable
  DECLINED // Payment declined
  OTHER // Other reasons
}

// ==========================================
// CancelOrder Model
// Used in: Cancel Orders management
// File: app/routes/app.cancelOrders.jsx
// Purpose: Tracks orders that need to be cancelled
// ==========================================
model CancelOrder {
  id        Int               @id @default(autoincrement())
  orderId   String           @unique // Shopify order ID
  email     String                    // Customer email
  refund    Boolean          @default(false) // Whether to refund
  restock   Boolean          @default(true) // Whether to restock items
  reason    OrderCancelReason // Reason for cancellation
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model DashboardSettings {
  id                String   @id @default(cuid())
  initialThreshold  Float    @default(75)
  totalOrders      Int      @default(156)
  flaggedOrders    Int      @default(36)
  ordersToShip     Int      @default(120)
  deliveryRate     Float    @default(78)
  previousDeliveryRate Float @default(56)
  dailySavings     Float    @default(27000)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model DashboardCosts {
  id                    String   @id @default(cuid())
  forwardShipping       Float    @default(80)
  reverseShipping       Float    @default(60)
  packaging            Float    @default(30)
  storage              Float    @default(10)
  averageStorageDays   Int      @default(15)
  inventoryCostPerOrder Float    @default(1200)
  marketingCostPerOrder Float    @default(200)
  operationsCostPerOrder Float   @default(150)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model BusinessMetrics {
  id                String   @id @default(cuid())
  type              String   @unique// 'BASE' or 'SHIP_ALL'
  profit            Float    
  percentage        Float    
  upfrontCost       Float    
  capitalEfficiency Float    
  rtoRate           Float    
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@index([type])
}

// Remove both existing CutoffMode models and replace with single model
model CutoffMode {
  id          String   @id @default(cuid())
  modeId      String   @unique // aggressive, balanced, maximum
  name        String
  description String
  threshold   Float
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}

enum PaymentStatus {
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  PARTIALLY_REFUNDED
  PENDING
  REFUNDED
  VOIDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT
  PAYPAL
  SHOP_PAY
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum RiskStatus {
  HIGH
  MEDIUM
  LOW
  VERIFIED
  PENDING
}

enum OtpStatus {
  SENT
  VERIFIED
  FAILED
  NOT_SENT
}

enum IvrStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ShipmentStatus {
  FULFILLED
  PARTIAL
  UNFULFILLED
  DELIVERED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  ATTEMPTED
  FAILED
  CANCELLED
  ON_HOLD
  RETURNED
}
